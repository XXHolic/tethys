{"root":{"data":{"id":"c7ad158f3840","created":1564481617,"text":"箭头函数"},"children":[{"data":{"id":"bvwihargf540","created":1564481708117,"text":"形式","note":"- 使用“箭头”（=>）定义函数\n```js\nvar f = v => v;\n\n// 等同于\nvar f = function (v) {\n  return v;\n};\n```"},"children":[]},{"data":{"id":"bvwikdjxkdk0","created":1564481949285,"text":"书写注意","note":"- 所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。\n```js\n// 报错\nlet getTempItem = id => { id: id, name: \"Temp\" };\n\n// 不报错\nlet getTempItem = id => ({ id: id, name: \"Temp\" });\n```"},"children":[]},{"data":{"id":"bvwii068dog0","created":1564481763430,"text":"this指向","note":"- 就是定义时所在的对象，而不是使用时所在的对象\n\n- this指向的固定化，并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，导致内部的this就是外层代码块的this。正是因为它没有this，所以也就不能用作构造函数。"},"children":[]},{"data":{"id":"bvwimordrd40","created":1564482130408,"text":"用途注意","note":"- 不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\n\n- 不可以使用arguments对象，该对象在函数体内不存在。\n\n- 不可以使用yield命令，因此箭头函数不能用作 Generator 函数。"},"children":[]}]},"template":"right","theme":"fresh-blue","version":"1.4.43"}