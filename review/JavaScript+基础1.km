{"root":{"data":{"id":"cb6a94d77e65","created":1559231372,"text":"JavaScript 基础1","image":"","imageTitle":"","imageSize":"","priority":null,"progress":null,"font-family":"comic sans ms","font-size":24,"expandState":"expand"},"children":[{"data":{"id":"bugthq5u8m80","created":1559231656101,"text":"基本类型","layout":null,"layout_mind_offset":{"x":1,"y":-77},"expandState":"expand","priority":1,"color":"#ff0000"},"children":[{"data":{"id":"buj1vlb7hqo0","created":1559458431432,"text":"String","priority":null,"color":"#ff0000","expandState":"expand"},"children":[]},{"data":{"id":"buj1vnvxp680","created":1559458437039,"text":"Number","expandState":"expand","color":"#ff0000"},"children":[{"data":{"id":"buj22ngjiiw0","created":1559458984657,"text":"NaN","note":"1. 数值中只有 0 除以 0 会返回NaN\n\n2. 任何涉及 NaN 的操作（例如NaN/10）都会返回NaN\n\n3. NaN 与任何值都不相等，包括NaN 本身\n\n4. isNaN() 方法，注意空字符串会返回 false，跟测试数字返回值一样","color":"#ff0000","expandState":"expand"},"children":[]},{"data":{"id":"buj27ohakr40","created":1559459378700,"text":"类型转换","note":"1. Numbert(null) 返回值是 0\n\n2. Numbert(undefined) 返回值是 NaN","color":"#ff0000","expandState":"expand"},"children":[]}]},{"data":{"id":"buj1vq1ss7k0","created":1559458441747,"text":"Boolean","color":"#ff0000","expandState":"expand"},"children":[]},{"data":{"id":"buj1vte33340","created":1559458449020,"text":"Object","color":"#ff0000","expandState":"expand"},"children":[]},{"data":{"id":"buj1vxs73iw0","created":1559458458581,"text":"Undefined","note":"1. null === undefined 为 true，因为，undefined 值是派生自null 值的。\n\n","color":"#ff0000","expandState":"expand"},"children":[]},{"data":{"id":"buj1w1qzqyw0","created":1559458467215,"text":"Null","note":"1. 发音 [nʌl]\n\n2. typeof null 返回的值是 object","color":"#ff0000","expandState":"expand"},"children":[]},{"data":{"id":"buj1w5y2no80","created":1559458476350,"text":"Symbol","note":"1. symbol 类型的是独一无二的，可以来来防止属性名相同的冲突\n\n2. symbol 不能使用 new Symbol()\n\n3. Boolean() 转换为 true\n\n参考链接：http://es6.ruanyifeng.com/#docs/symbol","color":"#ff0000","expandState":"expand"},"children":[]}]},{"data":{"id":"bugthxt34uo0","created":1559231672744,"text":"作用域和内存","layout":null,"layout_mind_offset":{"x":3,"y":47},"background":"#ffffff","color":"#548dd4","priority":2,"expandState":"expand"},"children":[{"data":{"id":"bugtkgqn2q00","created":1559231870683,"text":"作用域","layout":null,"note":"- 作用域是一套规则，用于确定在何处以及如何查找变量","background":"#ffffff","color":"#548dd4","expandState":"expand"},"children":[]},{"data":{"id":"bugtkljnphc0","created":1559231881145,"text":"垃圾回收","layout":null,"background":"#ffffff","color":"#548dd4","expandState":"expand"},"children":[{"data":{"id":"bujcdbjba600","created":1559488031808,"text":"标记清除","note":"- 垃圾收集器会给存储在内存中的所有变量都加上标记，它会去掉正在使用或被引用变量的标记。每隔一段时间就会“清理”那些带有标记的变量。","background":"#ffffff","color":"#548dd4","expandState":"expand"},"children":[]},{"data":{"id":"bujcdwporu80","created":1559488077906,"text":"引用计数","note":"- 跟踪记录每个值被引用的次数。当引用次数为 0 的就会被回收。\n\n- 这种方式有个严重的问题：相互引用。这样就永远回收不了。","background":"#ffffff","color":"#548dd4","expandState":"expand"},"children":[]}]},{"data":{"id":"bugtkqsvr2w0","created":1559231892586,"text":"内存泄漏","layout":null,"note":"- 使用的内存，一直没有得到释放，比较常见的就是变量的引用一直存在。\n\n- 相应的还有一个 “内存溢出” 概念：程序向系统申请一定大小的内存，而系统不能满足程序要求，于是产生了溢出。","background":"#ffffff","color":"#548dd4","expandState":"expand"},"children":[]}]},{"data":{"id":"bugtj950cu80","created":1559231775773,"text":"对象","layout":null,"layout_mind_offset":{"x":-28,"y":42},"priority":3,"expandState":"expand"},"children":[{"data":{"id":"bugtjm1pvrk0","created":1559231803873,"text":"原型链","layout":null,"note":"1. 原型链中的原型指的是 `Prototype` 属性。\n\n2. JavaScript 中的对象都有一个内置的 Prototype ，其实就是对象的引用。\n\n3. 当访问对象中的属性不存在时，就会查找对象内部 Prototype 关联的对象，这个关联关系就形成了一条原型链。Prototype 链最终都会指向内置的 Object.prototype 。\n\n4. 很常见的例子，就是模仿类，也就是常说的构造函数，用构造函数声明的对象，都是通过原型链相互关联起来，看起来像类一样，但其实有这本质的区别：**类是可以复制多次，就像模具一样，但   JavaScript 并没有类似的复制机制**","expandState":"expand"},"children":[]},{"data":{"id":"bugtl79j1r40","created":1559231928421,"text":"闭包","layout":null,"note":"1. 闭包其实在 JavaScript 中很常见，它是基于作用域写代码产生的结果。\n\n2. 当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时就产生了闭包。\n\n**作用**\n\n实现模块，模块主要有2个特征：\n\n1.  为创建内部作用域而调用了一个包装函数\n\n2. 包装函数的返回值必须至少包括一个对内部函数的引用","expandState":"expand"},"children":[]},{"data":{"id":"bugtnol1yi00","created":1559232122852,"text":"this","note":"绑定规则：\n- 默认绑定\n- 隐式绑定\n- 显式绑定\n- new 绑定\n\n判断优先级：\n1. 函数是否在 new 中调用（new 绑定）？如果是的话 this 绑定的是新创建的对象。\n\n2. 函数是否通过 call、apply 或 bind 绑定调用（显示绑定）？如果是的话，this 绑定的是指定的对象。\n\n3. 函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this 绑定的是那个上下文对象。\n\n4. 如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到 undefined，否则绑定到全局对象。","expandState":"expand"},"children":[]}]},{"data":{"id":"bugtjgihkuw0","created":1559231791826,"text":"事件","layout":null,"priority":4,"note":"- 事件，就是文档或浏览器窗口中发生的一些特定的交互。\n\n参考链接：\n- https://github.com/XXHolic/blog/issues/14","expandState":"expand"},"children":[{"data":{"id":"bugtloprez40","created":1559231966408,"text":"模拟事件","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"bunbhh809s80","created":1559891776359,"text":"事件处理程序","note":"- 响应某个事件的函数就叫做事件处理程序\n\n三种事件同时存在时：\n- DOM0 级事件处理程序会覆盖 HTML 事件处理程序，DOM2 级事件处理程序正常。","expandState":"expand"},"children":[{"data":{"id":"bunbo3unzo80","created":1559892295803,"text":"HTML 事件","note":"- 如果指定的处理程序比页面 DOM 后加载执行，那么用户可能在此之前就触发了事件，就会引发错误，对此，很多 HTML 事件处理程序都会被封装在一个 try-catch 块中。\n\n- 扩展事件处理程序的作用域链在不同的浏览器中会导致不同结果，这篇文章里面有说明。\n\n- 将 HTML 与 JavaScript 代码紧密耦合，不好维护。现在一般都不推荐这种方式，都提倡 HTML 内容和 JavaScript 行为分离。","expandState":"expand"},"children":[]},{"data":{"id":"bunbo8ftzuw0","created":1559892305790,"text":"DOM 0 级事件","note":"特点：\n\n- 简单，具有跨浏览器的优势，现代浏览器都支持这种方式。\n- 删除指定的事件处理程序，将事件处理程序属性的值设置为 null 即可。\n- 没有运行相关代码之前，相关事件的触发很有可能不会响应。说可能，是因为有些情况默认触发点击效果，例如 a 标签跳转功能。\n\n缺点：\n\n-每种事件类型最多只有一个处理程序，可能会被覆盖，后执行的会覆盖先执行的，","expandState":"expand"},"children":[]},{"data":{"id":"bunbodpd13c0","created":1559892317250,"text":" DOM 2 级事件","note":"特点：\n- 该方式是添加新的事件处理程序，不会覆盖已有的事件处理程序，也就是说可以跟 DOM0 级事件处理程序共存，先执行的代码先触发，示例页面。\n\n- 可以添加多个事件处理程序，调用顺序跟添加的顺序一致。\n\n- 通过 addEventListener() 添加的事件处理程序，只能通过 removeEventListener() 来删除，它们的参数要完全一样才有效。\n","expandState":"expand"},"children":[]}]},{"data":{"id":"bunay7v91e80","created":1559890267077,"text":"事件流","expandState":"expand","note":"- 事件流描述的是从页面中接收事件的顺序。\n\n- 同一元素，事件类型的触发顺序优先于事件流的触发顺序，比如 mouseup 在冒泡和捕获阶段有事件处理程序，也绑定了 在 捕获阶段 click 事件，mouseup 冒泡和捕获时间触发完了，才会触发 click 事件。","layout":null},"children":[{"data":{"id":"bugtll9wb000","created":1559231958919,"text":"捕获","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"bugtlhxyicg0","created":1559231951666,"text":"冒泡","layout":null,"note":"一般建议使用这个处理事件","expandState":"expand"},"children":[]},{"data":{"id":"bunb3ztmxoo0","created":1559890719751,"text":"DOM 事件流","note":"- “DOM2 级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。\n\n问题：同一个元素，在冒泡和捕获阶段都绑定同一类型事件，会如何？\n\n- 绑定事件处理程序写在前面的先触发\n\n- 同一事件可以绑定多个处理程序，但绑定时，如果 addEventListener 方法的参数相同，那么就不会重复触发多次。\n\n- 不同的事件处理程序，执行的顺序，跟绑定书写的顺序一致。\n\n","layout":null,"expandState":"expand"},"children":[]}]},{"data":{"id":"bunbhtarwio0","created":1559891802648,"text":"事件类型","expandState":"collapse","layout":null},"children":[{"data":{"id":"bunbtg97fdc0","created":1559892714625,"text":"UI 事件","note":"- UI 事件指的是那些不一定与用户操作有关的事件。\n\n- load\n- unload\n- abort\n- error\n- select\n- resize\n- scroll\n\n","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"bunbtrgurrk0","created":1559892739032,"text":"鼠标和滚轮","note":"- mousenter\n- mousedown\n- mouseup\n- click\n- dbclick\n- mouseleave\n- mousemove\n- mouseover\n- mouseout","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"bunbtyomn2w0","created":1559892754739,"text":"焦点","note":"- blue\n- focus","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"bunbtztgdrs0","created":1559892757208,"text":"键盘和文本","note":"- keydown,当用户按下键盘上的任意键时触发，而且如果按住不放的话，会重复触发此事件。\n\n- kepress,当用户按下键盘上的字符键时触发，而且如果按住不放的话，会重复触发此事件。\n\n- textInput,当用户在可编辑区域中输入字符时，就会触发这个事件。\n\n- keyup\n\n- 回车（Enter） keyCode 13","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"bunbu9exmu80","created":1559892778098,"text":"变动","note":"- DOMNodeRemoved\n\n- DOMNodeRemovedFromDocument\n\n- DOMSubtreeModified\n\n- DOMNodeInserted\n\n- DOMNodeInsertedIntoDocument","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"bunbuf7z12g0","created":1559892790737,"text":"设备","note":"- orientationchange,以便开发人员能够确定用户何时将设备由横向查看模式切换为纵向查看模式","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"bunbugqo4q00","created":1559892794045,"text":"html5","note":"- contextmenu\n\n- DOMContentLoaded\n\n- readystatechange\n\n- pageshow\n\n- pagehide\n\n- hashchange","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"bunbulw196o0","created":1559892805253,"text":"触摸和手势","note":"- touchstart\n- touchmove\n- touchend\n- touchcancel","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"bunbva41t9k0","created":1559892857981,"text":"复合","note":"- 复合事件（composition event）是DOM3 级事件中新添加的一类事件，用于处理IME 的输入序列。\n\n- IME（Input Method Editor，输入法编辑器）可以让用户输入在物理键盘上找不到的字符。","layout":null,"expandState":"expand"},"children":[]}]}]},{"data":{"id":"bugtmrb30uw0","created":1559232050415,"text":"异步","layout":null,"priority":5,"layout_mind_offset":{"x":-4,"y":29},"expandState":"expand"},"children":[{"data":{"id":"bugtmutopbk0","created":1559232058070,"text":"ajax ","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"bugtn3glu2w0","created":1559232076871,"text":"promise","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"bugtn6cs0340","created":1559232083169,"text":"fetch","layout":null,"expandState":"expand"},"children":[]},{"data":{"id":"bundi3ttm6g0","created":1559897467787,"text":"跨域","expandState":"expand"},"children":[]}]},{"data":{"id":"bundeo7mwh40","created":1559897198701,"text":"错误处理","priority":7,"expandState":"expand","layout_mind_offset":{"x":-39,"y":84}},"children":[]},{"data":{"id":"bundfb8sn2w0","created":1559897248837,"text":"JOSN","priority":6,"expandState":"expand","layout_mind_offset":{"x":-47,"y":156}},"children":[]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}