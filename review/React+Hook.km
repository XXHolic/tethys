{"root":{"data":{"id":"18c664ec03e3","created":1561888203,"text":"React Hook"},"children":[{"data":{"id":"bvaxh1w6n0g0","created":1562289686414,"text":"版本"},"children":[{"data":{"id":"bvaxirmh8p40","created":1562289820787,"text":"16.8"},"children":[]}]},{"data":{"id":"bvaxh326czk0","created":1562289688953,"text":"作用"},"children":[{"data":{"id":"bvaxkpul84g0","created":1562289973652,"text":"状态复用","note":"- Hook 将组件中相互关联的部分拆分成更小的函数"},"children":[]},{"data":{"id":"bvaxkvxbus80","created":1562289986879,"text":"简化理解和使用"},"children":[]},{"data":{"id":"bvaxlkdn6i80","created":1562290040108,"text":"让代码便于优化"},"children":[]}]},{"data":{"id":"bvaxhg2oo0g0","created":1562289717282,"text":"主要方法"},"children":[{"data":{"id":"bvaxq3a14jc0","created":1562290394705,"text":"useState","note":"- 初始化 state 的某个属性值和对应的处理程序\n\n- 可以多次使用\n\n```javascript\n const [age, setAge] = useState(42);\n  const [fruit, setFruit] = useState('banana');\n  const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n```"},"children":[]},{"data":{"id":"bvaxsrphkbs0","created":1562290604611,"text":"useEffect","note":"- 给函数组件增加了操作副作用的能力。\n\n-  React 组件中执行过数据获取、订阅或者手动修改过 DOM。我们统一把这些操作称为“副作用”，或者简称为“作用”。\n\n- 默认情况下，React 会在每次渲染后调用副作用函数\n\n- 可以多次使用"},"children":[]},{"data":{"id":"bvaxycu22yw0","created":1562291042420,"text":"useContext","note":"- 接收一个 context 对象（React.createContext 的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的 <MyContext.Provider> 的 value prop 决定。"},"children":[]}]},{"data":{"id":"bvaxhhk77m80","created":1562289720518,"text":"规则","note":"1. 只能在函数最外层调用 Hook。不要在循环、条件判断或者子函数中调用。\n\n2. 只能在 React 的函数组件中调用 Hook。不要在其他 JavaScript 函数中调用。"},"children":[]}]},"template":"right","theme":"fresh-blue","version":"1.4.43"}